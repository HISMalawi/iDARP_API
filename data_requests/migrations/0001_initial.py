# Generated by Django 4.1 on 2023-09-25 12:15

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '__first__'),
        ('data_exploration', '0001_initial'),
        ('data_dictionary', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ApprovalProcedure',
            fields=[
                ('approval_procedure_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('designed_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'approval_procedures',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DataRequest',
            fields=[
                ('request_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('department', models.CharField(blank=True, max_length=255, null=True)),
                ('needed_on', models.DateField()),
                ('protocol_ref_num', models.CharField(blank=True, max_length=255, null=True)),
                ('ethics_doc_path', models.CharField(blank=True, max_length=255, null=True)),
                ('ethics_approval_letter', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'N/A')], max_length=10, null=True)),
                ('submitted', models.BooleanField(blank=True, null=True)),
                ('submitted_on', models.DateTimeField(blank=True, null=True)),
                ('file_path', models.CharField(blank=True, max_length=255, null=True)),
                ('exempted', models.BooleanField(default=False)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='users.assignedrole')),
            ],
            options={
                'db_table': 'data_requests',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Purpose',
            fields=[
                ('purpose_id', models.AutoField(primary_key=True, serialize=False)),
                ('purpose', models.CharField(max_length=35, unique=True)),
            ],
            options={
                'db_table': 'purposes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='StageType',
            fields=[
                ('stage_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('stage_type', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'stage_types',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='StateLookup',
            fields=[
                ('state_lookup_id', models.AutoField(primary_key=True, serialize=False)),
                ('state', models.CharField(choices=[('Incoming', 'Incoming'), ('Unattended', 'Unattended'), ('Approved', 'Approved'), ('Denied', 'Denied')], max_length=255)),
            ],
            options={
                'db_table': 'state_lookups',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Stage',
            fields=[
                ('stage_id', models.AutoField(primary_key=True, serialize=False)),
                ('stage_order', models.IntegerField(blank=True, null=True)),
                ('stage_activity', models.TextField(blank=True, null=True)),
                ('branch_level', models.IntegerField(default=0)),
                ('pos_x', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('pos_y', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('icon', models.CharField(blank=True, max_length=30, null=True)),
                ('approval_procedure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_requests.approvalprocedure')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.role')),
                ('stage_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_requests.stagetype')),
            ],
            options={
                'db_table': 'stages',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RequestState',
            fields=[
                ('request_state_id', models.AutoField(primary_key=True, serialize=False)),
                ('attention', models.CharField(blank=True, max_length=255, null=True)),
                ('reason', models.TextField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now=True, null=True)),
                ('responded_on', models.DateTimeField(blank=True, null=True)),
                ('notifications_count', models.IntegerField(default=0)),
                ('stage_order', models.IntegerField(blank=True, null=True)),
                ('stage_type', models.CharField(blank=True, max_length=255, null=True)),
                ('branch_level', models.IntegerField(default=0)),
                ('pos_x', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('pos_y', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('icon', models.CharField(blank=True, max_length=30, null=True)),
                ('attended_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='users.assignedrole')),
                ('org_role', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='users.orgrole')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='data_request', to='data_requests.datarequest')),
                ('state_lookup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_requests.statelookup')),
            ],
            options={
                'db_table': 'request_state',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RequestPurpose',
            fields=[
                ('request_purpose_id', models.AutoField(primary_key=True, serialize=False)),
                ('purpose_description', models.TextField(blank=True, null=True)),
                ('purpose', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_requests.purpose')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_requests.datarequest')),
            ],
            options={
                'db_table': 'request_purposes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RequestedDataset',
            fields=[
                ('rdataset_id', models.AutoField(primary_key=True, serialize=False)),
                ('dataset_description', models.TextField(blank=True, null=True)),
                ('date_created', models.DateTimeField(auto_now=True)),
                ('release_date', models.DateTimeField(blank=True, null=True)),
                ('data_specs_path', models.CharField(blank=True, max_length=255, null=True)),
                ('data_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_dictionary.datasource')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='data_requests.datarequest')),
            ],
            options={
                'db_table': 'requested_datasets',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='NextState',
            fields=[
                ('next_state_id', models.AutoField(primary_key=True, serialize=False)),
                ('current_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current_state', to='data_requests.requeststate')),
                ('next', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='next_state', to='data_requests.requeststate')),
            ],
            options={
                'db_table': 'next_state',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='NextStage',
            fields=[
                ('next_stage_id', models.AutoField(primary_key=True, serialize=False)),
                ('current_stage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='next_stage_connections', to='data_requests.stage')),
                ('next', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prev_stage_connections', to='data_requests.stage')),
            ],
            options={
                'db_table': 'next_stages',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DatasetVariable',
            fields=[
                ('dataset_variable_id', models.AutoField(primary_key=True, serialize=False)),
                ('is_distinct', models.BooleanField(blank=True, null=True)),
                ('date_added', models.DateTimeField(auto_now=True)),
                ('rdataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dataset_variables', to='data_requests.requesteddataset')),
                ('var', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_dictionary.variable')),
            ],
            options={
                'db_table': 'dataset_variables',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DatasetPreset',
            fields=[
                ('preset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='data_exploration.preset')),
                ('rdataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_requests.datarequest')),
            ],
            options={
                'db_table': 'dataset_presets',
                'managed': True,
            },
        ),
    ]
